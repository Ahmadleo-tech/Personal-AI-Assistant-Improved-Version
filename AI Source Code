# # ##  ====================================================================================
import pyttsx3
import datetime
import requests
import webbrowser
import os
import smtplib
import speech_recognition as sr

# Initialize the pyttsx3 engine
engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id)

def speak(audio):
    engine.say(audio)
    engine.runAndWait()

def wishMe():
    hour = int(datetime.datetime.now().hour)
    if hour >= 0 and hour < 12:
        speak("Good Morning!")
    elif hour >= 12 and hour < 18:
        speak("Good Afternoon!")   
    else:
        speak("Good Evening!")  
    speak("I am Tony Sir. Please tell me how may I help you Sir")       

def takeCommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.pause_threshold = 1
        audio = r.listen(source)

    try:
        print("Recognizing...")
        query = r.recognize_google(audio, language='en-IN')
        print(f"User said: {query}\n")
    except Exception as e:
        print(e)
        print("Say that again please...")
        return "None"
    return query

def search_duckduckgo(query):
    response = requests.get(f"https://api.duckduckgo.com/?q={query}&format=json&pretty=1")
    data = response.json()
    return data.get('AbstractText', "No information found.")

def sendEmail(to, content):
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.ehlo()
    server.starttls()
    # Use environment variables to store sensitive data
    server.login('ahmadleo498@gmail.com', os.getenv('EMAIL_PASSWORD'))
    server.sendmail('ahmadleo498@gmail.com', to, content)
    server.close()

if __name__ == "__main__":
    wishMe()
    while True:
        query = takeCommand().lower()

        if 'wikipedia' in query:
            speak('Searching DuckDuckGo...')
            query = query.replace("wikipedia", "")
            results = search_duckduckgo(query)
            speak("According to DuckDuckGo")
            print(results)
            speak(results)

        elif 'open youtube' in query:
            speak("Opened Youtube")
            webbrowser.open("youtube.com")

        elif 'open google' in query:
            speak("Opened Google")
            webbrowser.open("google.com")

        elif 'open linkedin' in query:
            speak("Opened Linked in")
            webbrowser.open("linkedin.com")

        elif 'open twitter' in query:
            speak("Opened Twitter")
            webbrowser.open("twitter.com")

        elif 'open github' in query:
            speak("Opened GitHub")
            webbrowser.open("github.com")   

        elif 'play music' in query:
            speak("Opened Spotify")
            webbrowser.open("spotify.com") 

        elif 'the time' in query:
            strTime = datetime.datetime.now().strftime("%H:%M:%S")    
            speak(f"Ahmad , the time is {strTime}")

        elif 'open code' in query:
            codePath = r"D:\Python\PYTHON PROGECTS\TONY AI"
            os.startfile(codePath)

        elif 'email to sender person' in query:
            try:
                speak("What should I say?")
                content = takeCommand()
                to = "ahmadleo254@gmail.com"    
                sendEmail(to, content)
                speak("Email has been sent!")
            except Exception as e:
                print(e)
                speak("Sorry Ahmad Bhai. I am not able to send this email") 

        elif 'exit' in query or 'quit' in query:
            speak("Goodbye Ahmad Bro!")
            break

        else:
            speak("No query matched")

