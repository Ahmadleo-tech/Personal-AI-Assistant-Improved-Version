import pyttsx3
import datetime
import requests
import webbrowser
import os
import smtplib
import speech_recognition as sr
import yt_dlp
import getpass
import pyowm
from pyowm.utils.config import get_default_config

class TonyAI:
    def __init__(self, api_key, password=None):
        self.api_key = api_key
        self.config_dict = get_default_config()
        self.config_dict['language'] = 'en'
        self.owm = pyowm.OWM(self.api_key, self.config_dict)
        self.mgr = self.owm.weather_manager()
        self.speaker = pyttsx3.init()
        self.password = password

    def speak(self, text):
        self.speaker.say(text)
        self.speaker.runAndWait()

    def add_password(self):
        while True:
            password = getpass.getpass("Create a new password: ")
            confirm_password = getpass.getpass("Confirm your password: ")
            if password == confirm_password:
                self.password = password
                self.speak("Password set successfully.")
                break
            else:
                self.speak("Passwords do not match. Please try again.")

    def verify_password(self, input_password):
        if self.password is None:
            self.speak("No password set. Please set a password first.")
            return False
        if input_password == self.password:
            self.speak("Password is correct. Access granted.")
            return True
        else:
            self.speak("Incorrect password. Access denied.")
            return False

    def get_weather(self, city, t):
        try:
            observation = self.mgr.weather_at_place(city)
            weather = observation.weather
            
            temperature_c = weather.temperature('celsius')['temp']
            temperature_f = weather.temperature('fahrenheit')['temp']
            pressure = weather.pressure['press']
            humidity = weather.humidity
            weather_description = weather.detailed_status
            wind_speed = weather.wind()['speed']

            weather_info = f"Weather of {city}:"
            self.speak(weather_info)

            if t == 1:
                temp_info = f"Temperature in Celsius: {temperature_c} °C"
            elif t == 2:
                temp_info = f"Temperature in Fahrenheit: {temperature_f} °F"
            else:
                self.speak(f"{t} is an Invalid Input")
                return

            self.speak(temp_info)
            self.speak(f"Pressure is {pressure} hPa")
            self.speak(f"Humidity is {humidity} %")
            self.speak(f"Weather Description: {weather_description}")
            self.speak(f"Wind Speed is {wind_speed} m/s")

        except Exception as e:
            self.speak(f"An error occurred: {e}")

def speak(audio):
    engine = pyttsx3.init()
    engine.say(audio)
    engine.runAndWait()

def wishMe():
    hour = int(datetime.datetime.now().hour)
    if hour < 12:
        speak("Good Morning!")
    elif hour < 18:
        speak("Good Afternoon!")
    else:
        speak("Good Evening!")
    speak("I am Tony AI. Please tell me how may I assist you.")

def takeCommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        r.pause_threshold = 1
        audio = r.listen(source)

    try:
        print("Recognizing...")
        query = r.recognize_google(audio, language='en-IN')
        print(f"User said: {query}\n")
        return query.lower()
    except Exception as e:
        print(e)
        print("Say that again please...")
        return "None"

def search_duckduckgo(query):
    response = requests.get(f"https://api.duckduckgo.com/?q={query}&format=json&pretty=1")
    data = response.json()
    return data.get('AbstractText', "No information found.")

def sendEmail(to, content):
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.ehlo()
    server.starttls()
    server.login('Sender@gmail.com', os.getenv('EMAIL_PASSWORD'))
    server.sendmail('Sender@gmail.com', to, content)
    server.close()

def download_youtube_content(url, download_path):
    ydl_opts = {'format': 'best', 'outtmpl': f'{download_path}/%(title)s.%(ext)s'}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

if __name__ == "__main__":
    api_key = "7271cae763955ac86c0b3dbdcd7f7f55"
    tony_ai = TonyAI(api_key)

    # Prompt the user to add a password after initialization
    tony_ai.add_password()

    wishMe()
    while True:
        query = takeCommand()

        if 'wikipedia' in query:
            speak('Searching DuckDuckGo...')
            query = query.replace("wikipedia", "")
            results = search_duckduckgo(query)
            speak("According to DuckDuckGo:")
            speak(results)

        elif 'open youtube' in query:
            speak("Opening YouTube...")
            webbrowser.open("youtube.com")

        elif 'open google' in query:
            speak("Opening Google...")
            webbrowser.open("google.com")

        elif 'open linkedin' in query:
            speak("Opening LinkedIn...")
            webbrowser.open("linkedin.com")

        elif 'open twitter' in query:
            speak("Opening Twitter...")
            webbrowser.open("twitter.com")

        elif 'open github' in query:
            speak("Opening GitHub...")
            webbrowser.open("github.com")

        elif 'play music' in query:
            speak("Opening Spotify...")
            webbrowser.open("spotify.com")

        elif 'the time' in query:
            strTime = datetime.datetime.now().strftime("%H:%M:%S")
            speak(f"Ahmad, the time is {strTime}")

        elif 'open code' in query:
            codePath = r"D:\Python\PYTHON PROJECTS\TONY AI"
            os.startfile(codePath)

        elif 'email to sender person' in query:
            try:
                speak("What should I say?")
                content = takeCommand()
                to = "Receiver@gmail.com"
                sendEmail(to, content)
                speak("Email has been sent!")
            except Exception as e:
                print(e)
                speak("Sorry, I am unable to send this email.")

        elif 'weather' in query:
            speak("What city do you want to know the weather for?")
            city = takeCommand()
            temp_unit = 1  # 1 for Celsius
            tony_ai.get_weather(city, temp_unit)

        elif 'exit' in query or 'quit' in query:
            speak("Goodbye Ahmad!")
            break

        elif 'add password' in query:
            tony_ai.add_password()

        elif 'verify password' in query:
            speak("Please enter the password:")
            input_password = getpass.getpass("Enter password: ")
            tony_ai.verify_password(input_password)

        else:
            speak("No query matched.")
